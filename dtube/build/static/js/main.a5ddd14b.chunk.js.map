{"version":3,"sources":["dtube.png","components/Navbar.js","components/Main.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","this","props","isDarkModeEnabled","href","rel","src","dtube","width","height","alt","style","display","flexDirection","alignItems","marginBottom","marginRight","margin","type","onClick","toggleDarkMode","checked","id","account","Identicon","toString","Component","Main","maxHeight","currentHash","controls","currentTitle","fontWeight","target","minWidth","role","aria-label","onSubmit","event","preventDefault","title","videoTitle","value","uploadVideo","ref","accept","onChange","captureFile","input","placeholder","required","videos","map","video","key","changeVideo","hash","Footer","i","token","process","REACT_APP_API_TOKEN","client","Web3Storage","loaderStyle","position","top","left","transform","App","file","document","querySelector","setState","state","loading","bind","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","request","method","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","DTube","networks","Contract","abi","address","methods","videoCount","call","videosCount","latest","console","log","videoFile","put","files","wrapWithDirectory","cid","send","from","on","stopPropagation","prevState","setDarkModeToLocalStorage","val","localStorage","setItem","err","getItem","undefined","getDarkModeFromLocalStorage","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5ddd14b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dtube.a89a5c8c.png\";","import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\nimport dtube from \"../dtube.png\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav\n        className={\n          \"navbar navbar-dark fixed-top flex-md-nowrap p-1 shadow text-monospace\" +\n          (this.props.isDarkModeEnabled ? \" bg-dark\" : \" bg-white\")\n        }\n      >\n        <div className=\"px-5\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"/\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={dtube}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n              alt=\"DTube logo\"\n            />\n            &nbsp;\n            <span\n              className={\n                this.props.isDarkModeEnabled ? \"text-white\" : \"text-secondary\"\n              }\n            >\n              DTube\n            </span>\n          </a>\n        </div>\n        <ul\n          className=\"navbar-nav px-5\"\n          style={{ display: \"flex\", flexDirection: \"row\" }}\n        >\n          <li style={{ display: \"flex\", alignItems: \"center\" }}>\n            <p\n              style={{ marginBottom: 0, marginRight: \"10px\" }}\n              className={\n                this.props.isDarkModeEnabled ? \"text-white\" : \"text-secondary\"\n              }\n            >\n              {this.props.isDarkModeEnabled ? \"Dark Mode\" : \"Light Mode\"}\n            </p>\n          </li>\n          <li style={{ display: \"flex\", alignItems: \"center\" }}>\n            <label className=\"switch\" style={{ margin: 0 }}>\n              <input\n                type=\"checkbox\"\n                onClick={this.props.toggleDarkMode}\n                checked={this.props.isDarkModeEnabled}\n              />\n              <span className=\"slider round\"></span>\n            </label>\n          </li>\n          <li\n            style={{ margin: 0 }}\n            className=\"nav-item text-nowrap h5 d-none d-sm-none d-sm-block\"\n          >\n            <small\n              className={\n                \"px-1\" +\n                (this.props.isDarkModeEnabled\n                  ? \" text-white\"\n                  : \" text-secondary\")\n              }\n            >\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            {this.props.account ? (\n              <img\n                className=\"ml-2\"\n                width=\"30\"\n                height=\"30\"\n                src={`data:image/png;base64,${new Identicon(\n                  this.props.account,\n                  30\n                ).toString()}`}\n                alt=\"DTube account address\"\n              />\n            ) : (\n              <span></span>\n            )}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <div\n        className={\n          \"container-fluid text-monospace main p-2\" +\n          (this.props.isDarkModeEnabled ? \" bg-dark\" : \" bg-white\")\n        }\n      >\n        <br></br>\n        &nbsp;\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-md-10\">\n            <div\n              className=\"embed-responsive embed-responsive-16by9\"\n              style={{ maxHeight: \"720px\" }}\n            >\n              <video\n                src={`https://w3s.link/ipfs/${this.props.currentHash}`}\n                controls\n              ></video>\n            </div>\n            <div className=\"mt-3 ml-5\">\n              <h3\n                className={\n                  this.props.isDarkModeEnabled ? \"text-white\" : \"text-dark\"\n                }\n              >\n                <b>\n                  <i className=\"video-title\">{this.props.currentTitle}</i>\n                </b>\n              </h3>\n              <div className=\"mt-3\">\n                <p\n                  style={{ fontWeight: \"bold\" }}\n                  className={\n                    this.props.isDarkModeEnabled ? \"text-light\" : \"text-dark\"\n                  }\n                >\n                  IPFS CID:\n                  <span\n                    className={\n                      this.props.isDarkModeEnabled\n                        ? \"text-white\"\n                        : \"text-secondary\"\n                    }\n                  >\n                    {this.props.currentHash}\n                  </span>\n                </p>\n                <p\n                  style={{ fontWeight: \"bold\" }}\n                  className={\n                    this.props.isDarkModeEnabled ? \"text-light\" : \"text-dark\"\n                  }\n                >\n                  Share IPFS URL:\n                  <a\n                    href={`https://w3s.link/ipfs/${this.props.currentHash}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >{`https://w3s.link/ipfs/${this.props.currentHash}`}</a>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"vide-feed col-md-2 border border-secondary overflow-auto text-center\"\n            style={{ maxHeight: \"1400px\", minWidth: \"175px\" }}\n          >\n            <h5 className=\"feed-title\">\n              <b\n                className={\n                  this.props.isDarkModeEnabled ? \"text-white\" : \"text-secondary\"\n                }\n              >\n                Video Feed\n                <span role=\"img\" aria-label=\"video-emote\">\n                  📺\n                </span>\n              </b>\n            </h5>\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                const title = this.videoTitle.value;\n                this.props.uploadVideo(title);\n              }}\n            >\n              &nbsp;\n              <input\n                type=\"file\"\n                ref=\"fileUpload\"\n                accept=\".mp4, .mov, .mkv .ogg .wmv\"\n                onChange={this.props.captureFile}\n                style={{ width: \"250px\" }}\n              />\n              <div className=\"form-group mr-sm-2\">\n                <input\n                  id=\"videoTitle\"\n                  type=\"text\"\n                  ref={(input) => {\n                    this.videoTitle = input;\n                  }}\n                  className=\"form-control-sm mt-3 mr-3\"\n                  placeholder=\"Video title..\"\n                  required\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn border border-dark btn-primary btn-block btn-sm\"\n              >\n                Upload\n              </button>\n              &nbsp;\n            </form>\n            {this.props.videos.map((video, key) => {\n              return (\n                <div\n                  className=\"card mb-4 text-center bg-secondary mx-auto\"\n                  style={{ width: \"250px\", height: \"175px\" }}\n                  key={key}\n                >\n                  <div className=\"card-title bg-dark\">\n                    <small className=\"text-white\">\n                      <b>{video.title}</b>\n                    </small>\n                  </div>\n                  <div>\n                    <p\n                      onClick={() =>\n                        this.props.changeVideo(video.hash, video.title)\n                      }\n                    >\n                      <video\n                        src={`https://w3s.link/ipfs/${video.hash}`}\n                        style={{ width: \"200px\", height: \"110px\" }}\n                      />\n                    </p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\n\nexport default function Footer(props) {\n  return (\n    <div\n      className={\n        \"footer shadow\" + (props.isDarkModeEnabled ? \" bg-dark\" : \" bg-light\")\n      }\n    >\n      <section className=\"content-container\">\n        <div className=\"text-center p-5\">\n          <a\n            href=\"https://github.com/AkhileshThite/dtube/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GitHub repository\n            <span role=\"img\" aria-label=\"\">\n              🔗\n            </span>\n          </a>\n          <br />\n          <br />\n          <span\n            className={\n              props.isDarkModeEnabled ? \"text-white\" : \"text-secondary\"\n            }\n          >\n            <i>\n              <span role=\"img\" aria-label=\"\">\n                ⚠️\n              </span>\n              Use this DApp for educational purposes only! DTube is not\n              responsible for the harm caused by the content you're uploading.\n            </i>\n          </span>\n        </div>\n      </section>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Web3Storage } from \"web3.storage/dist/bundle.esm.min.js\";\nimport DTube from \"../abis/DTube.json\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport \"dotenv/config\";\n\nconst token = process.env.REACT_APP_API_TOKEN;\nconst client = new Web3Storage({ token });\n\nconst loaderStyle = {\n  position: \"fixed\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n};\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    // Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = DTube.networks[networkId];\n    if (networkData) {\n      const dtube = new web3.eth.Contract(DTube.abi, networkData.address);\n      this.setState({ dtube });\n      const videosCount = await dtube.methods.videoCount().call();\n      this.setState({ videosCount });\n      // Load videos, sort by newest\n      for (var i = videosCount; i >= 1; i--) {\n        const video = await dtube.methods.videos(i).call();\n        this.setState({\n          videos: [...this.state.videos, video],\n        });\n      }\n      //Set latest video with title to view as default\n      const latest = await dtube.methods.videos(videosCount).call();\n      this.setState({\n        currentHash: latest.hash,\n        currentTitle: latest.title,\n      });\n      this.setState({ loading: false });\n    } else {\n      window.alert(\"DTube contract not deployed to detected network.\");\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault();\n    const file = document.querySelector('input[type=\"file\"]');\n    return this.setState({ file: file });\n  };\n\n  async uploadVideo(title) {\n    console.log(\"Submitting file to IPFS...\");\n    const videoFile = this.state.file;\n    //adding file to the IPFS\n    const cid = await client.put(videoFile.files, { wrapWithDirectory: false });\n    this.setState({ loading: true });\n    this.state.dtube.methods\n      .uploadVideo(cid, title)\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false });\n      });\n  }\n\n  changeVideo = (hash, title) => {\n    this.setState({ currentHash: hash });\n    this.setState({ currentTitle: title });\n  };\n\n  toggleDarkMode(event) {\n    event.stopPropagation();\n    this.setState((prevState) => {\n      this.setDarkModeToLocalStorage(!prevState.isDarkModeEnabled);\n      return { isDarkModeEnabled: !prevState.isDarkModeEnabled };\n    });\n  }\n\n  setDarkModeToLocalStorage(val) {\n    try {\n      localStorage.setItem(\"isDarkModeEnabled\", val);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  getDarkModeFromLocalStorage() {\n    try {\n      const isDarkModeEnabled = localStorage.getItem(\"isDarkModeEnabled\");\n      if (isDarkModeEnabled !== undefined || isDarkModeEnabled !== null) {\n        if (isDarkModeEnabled === \"true\") return true;\n        else return false;\n      }\n      return false;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      account: \"\",\n      dtube: null,\n      videos: [],\n      loading: true,\n      currentHash: null,\n      currentTitle: null,\n      isDarkModeEnabled: false,\n    };\n\n    this.uploadVideo = this.uploadVideo.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n    this.changeVideo = this.changeVideo.bind(this);\n    this.toggleDarkMode = this.toggleDarkMode.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ isDarkModeEnabled: this.getDarkModeFromLocalStorage() });\n  }\n\n  render() {\n    return (\n      <div className={this.state.isDarkModeEnabled ? \"bg-dark\" : \"bg-light\"}>\n        <Navbar\n          account={this.state.account}\n          toggleDarkMode={this.toggleDarkMode}\n          isDarkModeEnabled={this.state.isDarkModeEnabled}\n        />\n        {this.state.loading ? (\n          <div id=\"loader\" style={loaderStyle}>\n            <p\n              className={\n                this.state.isDarkModeEnabled ? \"text-white\" : \"text-secondary\"\n              }\n            >\n              Loading...\n            </p>\n          </div>\n        ) : (\n          <>\n            <Main\n              videos={this.state.videos}\n              account={this.state.account}\n              uploadVideo={this.uploadVideo}\n              captureFile={this.captureFile}\n              changeVideo={this.changeVideo}\n              currentHash={this.state.currentHash}\n              currentTitle={this.state.currentTitle}\n              isDarkModeEnabled={this.state.isDarkModeEnabled}\n            />\n            <Footer isDarkModeEnabled={this.state.isDarkModeEnabled} />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}